"use strict";
/// <reference path="./typings/main.d.ts" />
var plugins = require("./cflare.plugins");
var CflareAccount = (function () {
    function CflareAccount() {
    }
    CflareAccount.prototype.authCheck = function () {
        return (this.authEmail && this.authKey); //check if auth is available
    };
    ;
    CflareAccount.prototype.auth = function (optionsArg) {
        this.authEmail = optionsArg.email;
        this.authKey = optionsArg.key;
    };
    CflareAccount.prototype.getZoneId = function (domainName) {
        var done = plugins.q.defer();
        this.listZones(domainName)
            .then(function (responseArg) {
            var filteredResponse = responseArg.result.filter(function (zoneArg) {
                return zoneArg.name === domainName;
            });
            if (filteredResponse.length >= 1) {
                done.resolve(filteredResponse[0].id);
            }
            else {
                plugins.beautylog.error("the domain " + domainName.blue + " does not appear to be in this account!");
                done.reject(undefined);
            }
        });
        return done.promise;
    };
    CflareAccount.prototype.createRecord = function () {
        var done = plugins.q.defer();
        return done.promise;
    };
    ;
    CflareAccount.prototype.removeRecord = function () {
        var done = plugins.q.defer();
        return done.promise;
    };
    ;
    CflareAccount.prototype.updateRecord = function () {
    };
    ;
    CflareAccount.prototype.listRecords = function (domainName) {
        var _this = this;
        var done = plugins.q.defer();
        this.getZoneId(domainName)
            .then(function (domainIdArg) {
            _this.request("GET", "/zones/" + domainIdArg + "/dns_records?per_page=100")
                .then(function (responseArg) {
                done.resolve(responseArg);
            });
        });
        return done.promise;
    };
    CflareAccount.prototype.listZones = function (domainName) {
        var done = plugins.q.defer();
        var requestRoute = "/zones?per_page=50";
        if (domainName)
            requestRoute = requestRoute + "&name=" + domainName;
        var result = {};
        this.request("GET", requestRoute)
            .then(function (responseArg) {
            result = responseArg;
            done.resolve(result);
        });
        return done.promise;
    };
    ;
    CflareAccount.prototype.request = function (methodArg, routeArg, bodyArg) {
        var done = plugins.q.defer();
        var options = {
            method: methodArg,
            url: "https://api.cloudflare.com/client/v4" + routeArg,
            headers: {
                "Content-Type": "application/json",
                "X-Auth-Email": this.authEmail,
                "X-Auth-Key": this.authKey
            },
            json: bodyArg
        };
        plugins.request(options, function (err, res, body) {
            if (!err && res.statusCode == 200) {
                var responseObj = JSON.parse(body);
                done.resolve(responseObj);
            }
            else {
                console.log(err);
                console.log(res);
                done.reject(err);
            }
            ;
        });
        return done.promise;
    };
    return CflareAccount;
}());
exports.CflareAccount = CflareAccount;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
